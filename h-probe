#! /usr/bin/env python

# Copyright 2012 IKT Leibniz Universitaet Hannover
# GPL2
# Zdravko Bozakov (zb@ikt.uni-hannover.de)

import os
import sys
import time
import pprint
import socket 
import logging
import threading
import multiprocessing
from optparse import OptionParser


# import Psyco if available
try:
    import psyco
    psyco.full()
except ImportError:
    pass


try:
    import numpy as np
    import pcap               # python-pypcap
    import dnet               # OSX: brew install libdnet --with-python

    #from scapy.all import *
except ImportError as e:
    print e
    print __name__ + ": please make sure the following packages are installed:"
    print "\tpython-pypcap"
    print "\tpython-numpy"
    print "optional"
    print "\tpython-progressbar"
    print "use sudo apt-get install in debian"
    exit(1)


import hphelper

if __name__ != '__main__': exit(0)

np.random.seed()


usage = "usage: %prog [options] host [savefile]"
oparser = OptionParser(usage, version = "H-probe version 1.0\ncopyright 2012, IKT Leibniz Universitaet Hannover")

oparser.add_option("-n", "--probe-num",  dest="pnum", default=100000, type="int", 
                  help="total number of probes (default: %default)")
oparser.add_option("-d", "--delta", dest="delta", default="1e-3", type="float", 
                  help="min. time in seconds between probes (default: %default)")
oparser.add_option("-r", "--rate", dest="rate", default=0.1, type="float", 
                  help="mean probing intensity between 0 and 1 (default: %default)")
oparser.add_option("-s", "--psize", dest="plen", default=64, type="int", 
                  help="total probe packet size in bytes (default: %default)")
oparser.add_option("-L", "--lag", dest="L", default=100.0, type="float", 
                  help="maximum lag in seconds (default: %default s)")
oparser.add_option("-M", "--agg-level", dest="M", nargs=2, default=[0.1,100.0], type="float", 
                  help="min/max aggregation range in seconds for aggregate variance method (default: %default s)")
oparser.add_option("--in-slots", action="store_true", dest="in_slots", default=False,
                  help="maximum lag and the aggregation levels are given in slots rather than absolute time")
oparser.add_option("-t", "--min-rtt", dest="min_rtt", default=-1.0, type="float", 
                  help="specify the minimum RTT used to detect a busy beriod")
oparser.add_option("--no-plot", action="store_true", dest="no_plot", default=False,
                  help="disable visualization (default: %default)")
oparser.add_option("--fps", dest="fps", default=1.0, type="float", 
                  help="frames per second for plotting (default: %default)")
oparser.add_option("--aggvar", action="store_true", dest="aggvar", default=False,
                  help="estimate aggregate variance (default)")
oparser.add_option("--xcov", action="store_true", dest="xcov", default=False,
                  help="estimate path covariance")
oparser.add_option("--hist", action="store_true", dest="hist", default=False,
                  help="generate a histogram of the RTTs")
oparser.add_option("--dump", action="store_true", dest="dump", default=False,
                  help="dump the captured RTTs to a file for post-processing")
oparser.add_option("--load", dest="loaddump", default='', type="string", 
                  help="load a dump of captured RTTs")
oparser.add_option("--tag", dest="tag", default='', type="string", 
                  help="optional tag appended to save filename (default: %default)")
oparser.add_option("--verbose", action="store_true", dest="DEBUG", default=False,
                  help="print additional info")
(hphelper.options, args) = oparser.parse_args()
options = hphelper.options 
from hphelper import DEBUG, INFO, ERROR

if not options.in_slots:
    options.L = int(1.0*options.L/options.delta)
    options.M = [max(1,int(m/options.delta)) for m in options.M]
else:
    options.L = int(options.L)
    options.M = [int(m) for m in options.M]

# set options
options.plot = not options.no_plot
options.ci = False

parsers = [options.aggvar, options.xcov, options.hist, options.dump]
if sum(parsers)>1:
    ERROR('multiple parsers were specified')
elif sum(parsers)==0:
    options.aggvar = True

options.C = (options.plen+24)*8/options.delta    # 8 (preamble) + 12 (IPG) + 4 (cksum) 



if options.DEBUG:
    # estimate time.time() accuracy
    hphelper.test_time_res()


# load and set CPU pinning/affinity mapping
options.CPUID = hphelper.load_process_affinities()
hphelper.set_affinity('main')

    
if options.loaddump:
    DST='localhost'
else:
    try:
        DST = args[0]
    except IndexError:
        ERROR('please specify a valid destination host!')

options.start_time = None

try:
    # save covariance data and plot to this file
    options.savefile = args[1]
except IndexError:
    options.savefile = None

if options.tag:
    options.tag = '_' + options.tag

options.DST = DST
ip_addr = dnet.addr(DST, dnet.ADDR_TYPE_IP)
options.IPDST = str(ip_addr)
eth_info = dnet.intf().get_dst(ip_addr)

net_info = {}
net_info['eth'] = eth_info['name']
net_info['ip_src'] = dnet.addr(eth_info['addr'].ip)
net_info['ip_dst'] = dnet.addr(DST, dnet.ADDR_TYPE_IP)

options.net_info = net_info


options.eth = eth_info['name']
options.IPSRC = dnet.addr(eth_info['addr'].ip)




try:
    os.nice(-20)
except:
    print "could not set niceness"


#################################################################################
INFO("source IP", "%s (%s)" % (net_info['ip_src'], net_info['eth']))
INFO("destination IP", net_info['ip_dst'])
INFO("probe size", "%d byte" % (options.plen))
if options.min_rtt>=0:
    INFO("minimum RTT", " %f s" % (options.min_rtt))
INFO("probing rate", '%.2f Mbps (%.2f), ' % (options.rate*options.C/1e6, options.rate) + 'delta: %.3e s, %d pps' % (options.delta, options.rate/options.delta))
print



#################################################################################
def run_processes(ns, *procs):
    # reset options
    ns.FATAL_ERROR = False
    ns.SND_READY = False
    ns.CAP_READY = False
    ns.RCV_READY = False

    plist = []
    for p in procs:
        proc = multiprocessing.Process(target=p['target'], args=p['args'])
        plist.append(proc)

        # ensure all processes are killed after exit
        proc.daemon = True
        proc.start()


    try:    
        while any([p.is_alive() for p in plist]):
            for p in plist:
                p.join(1)
            if ns.FATAL_ERROR: raise KeyboardInterrupt()


    except KeyboardInterrupt:
        print 'main process interrupted'
        for p in plist:
            p.terminate()


    #try:
    #        proc.join()
    #    except KeyboardInterrupt:
    #        ns.ABORT = True
            #parser_p.join()
            #rcvloop_p.terminate()
            #sendloop_p.terminate()




# initialize IPC channels:
# pipe for sending (seq, slot, RTTS) tuples from CAPTURE to PARSER
data_pipe_out, data_pipe_in = multiprocessing.Pipe(duplex=False)

manager = multiprocessing.Manager()
ns = manager.Namespace()



ns.cnum = None

psender = {'target':None, 'args':None, 'name':'sender'}
pcapture = {'target':None, 'args':None, 'name':'capture'}
pparser = {'target':None, 'args':None, 'name':'parser'}


#TODO TEMP
slottimes = np.zeros(options.pnum).astype(int)




ns.FATAL_ERROR = False
######### setup sender process ############################################
import sender

if options.loaddump:
    # use a dummy sender process
    psender['target'] = sender.dummyloop
else:
    # generate probing packets and start sending  
    psender['target'] = sender.sendloop

psender['args'] = (ns,)

######### setup capture process ############################################
import capture
if options.loaddump:
    # replace libpcap rcvloop method 
    pcapture['target'] = capture.dumploop   
else:
    pcapture['target'] = capture.rcvloop

pcapture['args'] = (data_pipe_in, ns)

######### setup parser process ##############################################
if options.dump:
    import dumpwriter
    pparser['target'] = dumpwriter.dumpwriter
elif options.aggvar:
    import parser_av
    print 'hererer'
    pparser['target'] = parser_av.avparser
elif options.hist:
    import parser_stats
    pparser['target'] = parser_stats.statsparser
elif options.xcov:
    import parser_xcov
    pparser['target'] = parser_xcov.xcparser

pparser['args'] = (data_pipe_out, ns, slottimes)




######### calibration run #################################################################
# measure the mean RTT if none is specified by the user
if (options.min_rtt == -1.0 and 
    not options.hist and 
    not options.dump):

    # send cnum probes to get an estimate of the mean RTT to use for
    # d_min/busy period detection
    ns.cnum = int(min(max(options.pnum*0.01, 1000),10000))
    ns.cnum = min(ns.cnum, options.pnum)
    print 'calibrating using %d samples...' % (ns.cnum)

    import parser_stats
    pparser_temp_target = pparser['target']
    pparser['target'] = parser_stats.statsparser
    
    try:
        run_processes(ns, psender, pcapture, pparser)
    except KeyboardInterrupt:
        pass

    # reset options
    ns.cnum = None
    pparser['target'] = pparser_temp_target


try:
    options.min_rtt = ns.mean_rtt
    DEBUG("overriding minimum RTT:\t\t%.6f s" % options.min_rtt)
except AttributeError:
    # not calibrated
    pass

############################################################################################

try:
    if not ns.FATAL_ERROR:
        run_processes(ns, psender, pcapture, pparser)
except KeyboardInterrupt:
    pass



print 'h-probe done.'

